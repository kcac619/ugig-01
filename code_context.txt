

// File: \Wisflux\Internship Assignments\UGIG self draft\ugig-01\src\components\ui\Grid.tsx
// components/ui/Grid.tsx
"use client";
import { SimpleGrid, Box } from "@chakra-ui/react";

interface GameGridProps {
  handleCellClick: (cell: string) => void;
  selectedCells: Record<string, string>;
}

const GameGrid: React.FC<GameGridProps> = ({
  handleCellClick,
  selectedCells,
}) => {
  const gridItems = Array.from({ length: 64 }, (_, index) => index);

  return (
    <SimpleGrid columns={8} columnGap={2} rowGap={2} p={4}>
      {gridItems.map((item) => {
        const row = Math.floor(item / 8);
        const col = item % 8;
        const cell = `${row}-${col}`;
        const isSelected = !!selectedCells[cell]; // Check if selected
        const playerColor = isSelected ? "green.500" : "gray.200"; // Choose color based on selected state

        return (
          <Box
            key={item}
            bg={playerColor} // Apply the dynamic color
            height="50px"
            width="50px"
            display="flex"
            alignItems="center"
            justifyContent="center"
            borderRadius="md"
            cursor="pointer"
            _hover={{ bg: "gray.300" }}
            onClick={() => handleCellClick(cell)}
          >
            {isSelected && selectedCells[cell].slice(0, 1).toUpperCase()}{" "}
            {/* Conditionally render the player name/initial*/}
          </Box>
        );
      })}
    </SimpleGrid>
  );
};

export default GameGrid;



// File: \Wisflux\Internship Assignments\UGIG self draft\ugig-01\src\components\ui\Navbar.tsx



// File: \Wisflux\Internship Assignments\UGIG self draft\ugig-01\src\components\ui\OnlineUsers.tsx
// components/OnlineUsers.tsx
"use client";

import { useEffect, useState, useContext } from "react";
import { io } from "socket.io-client";
import { SocketContext } from "../ui/SocketProvider";
import { Box, VStack, Text, Heading, Button } from "@chakra-ui/react";
import { Pixelify_Sans } from "next/font/google";

const pixelify = Pixelify_Sans({ subsets: ["latin"] });

const OnlineUsers: React.FC = () => {
  const { socket } = useContext(SocketContext);
  const [onlineUsers, setOnlineUsers] = useState<string[]>([]);
  // const [socket, setSocket] = useState<any>(null);

  // const emitted = false;
  // useEffect(() => {
  //   const newSocket = io(`${process.env.NEXT_PUBLIC_BACKEND_URL}/game`);
  //   setSocket(newSocket);

  //   return () => {
  //     if (newSocket) {
  //       newSocket.disconnect();
  //     }
  //   };
  // }, []);

  useEffect(() => {
    if (socket) {
      socket.on("connect", () => {
        console.log("Connected to server");
        socket.emit("getOnlineUsers"); // Get initial user list
      });

      socket.on("updateUserList", (users: any) => {
        setOnlineUsers(users);
      });

      return () => {
        socket.off("connect");
        socket.off("updateUserList");
      };
    }
  }, [socket]);

  const textColor = "teal.500"; // Set a static text color

  return (
    <VStack rowGap={4} align="center">
      <Heading
        as="h2"
        fontSize="xl"
        color={textColor}
        className={pixelify.className}
      >
        Online Players: {onlineUsers.length}
      </Heading>
    </VStack>
  );
};

export default OnlineUsers;



// File: \Wisflux\Internship Assignments\UGIG self draft\ugig-01\src\components\ui\OnlineUsersList.tsx
// src/components/OnlineUserList.tsx
"use client";
import { useEffect, useState, useContext } from "react";

import { Box, VStack, Text, Heading, HStack, Button } from "@chakra-ui/react";
import { SocketContext } from "../ui/SocketProvider";
import { Toaster, toaster } from "../chakra/toaster";
interface OnlineUserProps {
  onlineUsers: string[];
  handleInvite: (username: string) => void; // Add handleInvite prop
}

const OnlineUsersList: React.FC<OnlineUserProps> = ({ handleInvite }) => {
  const { socket } = useContext(SocketContext);
  const [onlineUsers, setOnlineUsers] = useState<string[]>([]);
  const handleInviteClick = (userToInvite: string) => {
    // console.log("Inviting user:", userToInvite);
    handleInvite(userToInvite); // Call the provided handleInvite function
  };
  useEffect(() => {
    if (socket) {
      socket.on("connect", () => {
        socket.emit("getOnlineUsers"); // Get initial user list
      });
      socket.on("inviteSent", (data: any) => {
        if (data.success) {
          toaster.create({
            title: `Invite sent to ${data.to}`,

            type: "success",
            duration: 3000,
          });
        } else if (data.error) {
          toaster.create({
            title: data.error,
            type: "error",
            duration: 3000,
          });
        }
      });
      socket.on("updateUserList", (users: any) => {
        setOnlineUsers(users);
      });

      return () => {
        socket.off("connect");
        socket.off("invitesent");
        socket.off("updateUserList");
      };
    }
  }, [socket, toaster]);

  if (!socket)
    return (
      <>
        {" "}
        <Text>no socket detected yet</Text>
      </>
    );

  return (
    <>
      {/* <Box>
        <VStack rowGap={4} align="center">
          <Heading as="h2" size="lg">
            Online Users
          </Heading>

          <VStack rowGap={2} align="start">
            {onlineUsers.length > 0 ? (
              onlineUsers.map((user) => <Text key={user}>{user}</Text>)
            ) : (
              <Text>No users online</Text>
            )}
          </VStack>
        </VStack>
      </Box> */}
      <Box>
        <VStack rowGap={4} align="center">
          <Heading as="h2" size="lg">
            Online Users
          </Heading>

          <VStack rowGap={2} align="start">
            {onlineUsers.length > 0 ? (
              onlineUsers.map((user) => (
                <HStack key={user} justifyContent="space-between" width="200px">
                  <Text>{user}</Text>

                  <Button
                    onClick={() => handleInviteClick(user)} // Pass the user to invite
                    disabled={user === localStorage.getItem("username")} // Disable if inviting self
                    size="xs"
                    className="bg-white text-black px-2"
                  >
                    Invite
                  </Button>
                </HStack>
              ))
            ) : (
              <Text>No other users online</Text>
            )}
          </VStack>
        </VStack>
      </Box>
    </>
  );
};

export default OnlineUsersList;



// File: \Wisflux\Internship Assignments\UGIG self draft\ugig-01\src\components\ui\SocketProvider.tsx
// components/SocketProvider.tsx
"use client";
import { createContext, useEffect, useRef, useState } from "react";
import { io, Socket } from "socket.io-client";

interface SocketContextValue {
  socket: Socket | null;
}

const SocketContext = createContext<SocketContextValue>({
  socket: null,
});

interface SocketProviderProps {
  children: React.ReactNode;
}

const SocketProvider = ({ children }: SocketProviderProps) => {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const socketRef = useRef<Socket | null>(null);

  const createSocketConnection = (token: string | null) => {
    // Disconnect and clean up any existing socket
    if (socketRef.current) {
      socketRef.current.disconnect();
      socketRef.current = null;
      setSocket(null);
    }

    if (!token) return; // Don't create a connection if there's no token

    const newSocket = io(`${process.env.NEXT_PUBLIC_BACKEND_URL}/game`, {
      extraHeaders: {
        Authorization: `Bearer ${token}`,
      },
    });

    console.log("newSocket", newSocket);

    newSocket.on("connect", () => {
      console.log("Connected to server");
    });

    socketRef.current = newSocket;
    setSocket(newSocket);
  };

  useEffect(() => {
    const storedToken = localStorage.getItem("token");
    setToken(storedToken); // Set initial token state

    createSocketConnection(storedToken); // Create initial connection if token exists

    return () => {
      socket?.disconnect();
      socketRef.current = null;
      setSocket(null);
    };
  }, []);

  // Recreate connection when token changes
  useEffect(() => {
    createSocketConnection(token); // Create connection (or disconnect if token is null)

    return () => {
      socket?.disconnect();
      socketRef.current = null;
      setSocket(null);
    };
  }, [token]);

  useEffect(() => {
    const handleStorageChange = () => {
      const newToken = localStorage.getItem("token");
      console.log("newToken", newToken);

      setToken(newToken);
    };

    window.addEventListener("storage", handleStorageChange);

    return () => {
      window.removeEventListener("storage", handleStorageChange);
    };
  }, []);

  return (
    <SocketContext.Provider value={{ socket: socketRef.current }}>
      {children}
    </SocketContext.Provider>
  );
};

export { SocketContext, SocketProvider };



// File: \Wisflux\Internship Assignments\UGIG self draft\ugig-01\src\app\auth\login\page.tsx
"use client"; // This is crucial for client-side components

import {
  Heading,
  Box,
  Button,
  VStack,
  Container,
  Input,
  Stack,
  Fieldset,
} from "@chakra-ui/react";
import { Field } from "@/components/chakra/field";
import { InputGroup } from "@/components/chakra/input-group";
import { useState } from "react";
import { useRouter } from "next/navigation"; // Import from next/navigation
import { FaUser, FaLock } from "react-icons/fa";
import { Toaster, toaster } from "@/components/chakra/toaster";

export default function LoginPage() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null); // For more specific error display
  const router = useRouter();

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    setError(null); // Clear previous errors

    try {
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_BACKEND_URL}/auth/login`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ username, password }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json(); // Get error details
        if (errorData.message) {
          setError(errorData.message); // Set specific error message
          toaster.create({
            title: errorData.message, // Display the server message
            type: "error",
          });
        } else {
          setError("Login failed."); // Generic message if no specific message is provided
          toaster.create({
            title: "Login failed.",
            type: "error",
          });
        }
        return;
      }

      // Login successful
      const data = await response.json();
      localStorage.setItem("token", data.access_token);
      console.log(data);
      toaster.create({
        title: "Login successful.",
        description: "You have successfully logged in.",
        type: "success",
      });
      router.push("/play"); // Redirect using next/navigation
    } catch (error) {
      // Handle unexpected errors
      setError("An unexpected error occurred.");
      toaster.create({
        title: "An unexpected error occurred.",
        type: "error",
      });
    }
  };

  return (
    <Container
      maxW="md"
      centerContent
      p={4}
      display="flex"
      alignItems="center"
      justifyContent="center"
      minH="100vh"
    >
      <Toaster />
      <VStack rowGap={4} align="center" width="100%">
        <Heading as="h1" size="lg" mb={4}>
          Login
        </Heading>

        <Box as="form" onSubmit={handleSubmit} width="100%">
          <Fieldset.Root size="lg" maxW="md">
            <Stack rowGap={4}>
              {/* <Fieldset.Legend>Login</Fieldset.Legend> */}
              <Fieldset.HelperText>
                Please provide your login details below.
              </Fieldset.HelperText>
            </Stack>

            <Fieldset.Content>
              <Field label="Username" required>
                <InputGroup flex="1" startElement={<FaUser />}>
                  <Input
                    name="username"
                    type="text"
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                    placeholder="Enter your username"
                  />
                </InputGroup>
              </Field>

              <Field label="Password" required>
                <InputGroup flex="1" startElement={<FaLock />}>
                  <Input
                    name="password"
                    type="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    placeholder="Enter your password"
                  />
                </InputGroup>
              </Field>
            </Fieldset.Content>

            <Button
              type="submit"
              alignSelf="flex-start"
              colorScheme="teal"
              size="lg"
              mt={4}
            >
              Login
            </Button>
          </Fieldset.Root>
        </Box>
      </VStack>
    </Container>
  );
}



// File: \Wisflux\Internship Assignments\UGIG self draft\ugig-01\src\app\auth\signup\page.tsx
"use client"; // This is crucial for client-side components

import {
  Heading,
  Box,
  Button,
  VStack,
  Container,
  Input,
  Stack,
  Fieldset,
} from "@chakra-ui/react";
import { Toaster, toaster } from "../../../components/chakra/toaster";
import { Field } from "@/components/chakra/field";
import {
  NativeSelectField,
  NativeSelectRoot,
} from "@/components/chakra/native-select";
import { useState } from "react";
import { useRouter } from "next/navigation"; // Import from next/navigation

export default function SignUpPage() {
  const [username, setUsername] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null); // For more specific error display
  const router = useRouter();

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    setError(null); // Clear previous errors

    try {
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_BACKEND_URL}/auth/signup`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ username, email, password }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json(); // Get error details
        if (errorData.message) {
          setError(errorData.message); // Set specific error message
          toaster.create({
            title: errorData.message, // Display the server message
            type: "error",
            duration: 3000,
          });
        } else {
          setError("Signup failed."); // Generic message if no specific message is provided
          toaster.create({
            title: "Signup failed.",
            type: "error",
            duration: 3000,
          });
        }
        return;
      }

      // Signup successful
      toaster.create({
        title: "Account created.",
        description: "We've created your account for you.",
        type: "success",
        duration: 6000,
      });
      router.push("/auth/login"); // Redirect using next/navigation
    } catch (error) {
      // Handle unexpected errors
      setError("An unexpected error occurred.");
      toaster.create({
        title: "An unexpected error occurred.",
        type: "error",
        duration: 3000,
      });
    }
  };

  return (
    <Container maxW="md" centerContent p={4}>
      <Toaster />
      <Heading as="h1" size="lg" mb={4}>
        Sign Up
      </Heading>

      <Box as="form" onSubmit={handleSubmit} width="100%">
        <Fieldset.Root size="lg" maxW="md">
          <Stack>
            <Fieldset.Legend>Sign Up</Fieldset.Legend>
            <Fieldset.HelperText>
              Please provide your details below.
            </Fieldset.HelperText>
          </Stack>

          <Fieldset.Content>
            <Field label="Username" required>
              <Input
                name="username"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
              />
            </Field>

            <Field label="Email address" required>
              <Input
                name="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </Field>

            <Field label="Password" required>
              <Input
                name="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </Field>
          </Fieldset.Content>

          <Button
            type="submit"
            alignSelf="flex-start"
            colorScheme="teal"
            size="lg"
          >
            Sign Up
          </Button>
        </Fieldset.Root>
      </Box>
    </Container>
  );
}



// File: \Wisflux\Internship Assignments\UGIG self draft\ugig-01\src\app\play\page.tsx
// src/app/play/page.tsx
"use client";
import {
  Box,
  Button,
  Container,
  Heading,
  Text,
  VStack,
} from "@chakra-ui/react";
// import { io } from "socket.io-client";
import { useEffect, useState, useContext } from "react";
import GameGrid from "../../components/ui/Grid";
import OnlineUsersList from "../../components/ui/OnlineUsersList";
import {
  SocketContext,
  SocketProvider,
} from "../../components/ui/SocketProvider";
import { Toaster, toaster } from "@/components/chakra/toaster";

export default function Play() {
  const [onlineUsers, setOnlineUsers] = useState<string[]>([]);
  const [roomId, setRoomId] = useState<string | null>(null);

  const [selectedCells, setSelectedCells] = useState<Record<string, string>>(
    {}
  );
  const [invitationSent, setInvitationSent] = useState(false);
  const [receivedInvite, setReceivedInvite] = useState<{
    from: string;
  } | null>(null);
  const [opponentUsername, setOpponentUsername] = useState<string | null>(null);

  const { socket } = useContext(SocketContext);
  console.log("play page socket", socket);

  useEffect(() => {
    if (socket) {
      socket.on("connect", () => {
        console.log("Connected to server");
        socket.emit("getOnlineUsers"); // Get initial user list
      });

      socket.on("updateUserList", (users: any) => {
        const otherUsers = users.filter(
          (user: any) => user !== localStorage.getItem("username")
        );
        setOnlineUsers(otherUsers); // Update state with other users
      });
      socket.on("joinedRoom", (data) => {
        setRoomId(data.roomId);
        console.log("Joined room:", data.roomId);
      });
      socket.on("receiveInvite", (data) => {
        console.log("Received invite from:", data.from);
        setReceivedInvite(data); // Set receivedInvite state
        toaster.create({
          title: `Received invite from ${data.from}`,
          type: "info",
          duration: 10000,
        });
      });
      socket.on("joinedRoom", (data) => {
        setRoomId(data.roomId);
        if (receivedInvite && receivedInvite.from) {
          setOpponentUsername(receivedInvite.from); // Set opponent username when joining a room via invite
        } else if (invitationSent) {
          // if you are the one who sent the invitation

          setOpponentUsername((prevOpponent) => {
            if (prevOpponent) return prevOpponent; // keeps the previous username if available

            if (onlineUsers.length) return onlineUsers[0]; // keeps the first player in the onlineUserList as the opponent

            return null; // return null if no opponent found
          });
        }
        console.log("Joined room:", data.roomId);

        toaster.create({
          title: `Joined Room`,
          description: `Room ID :  ${data.roomId}`,
          type: "info",
          duration: 9000,
        });
      });
      socket.on("cellSelected", (data: any) => {
        console.log(`Client ${data.username} selected cell ${data.cell}`);

        setSelectedCells((prev) => ({ ...prev, [data.cell]: data.username }));
      });

      return () => {
        socket.off("connect");
        socket.off("updateUserList");
        socket.off("receiveInvite"); // Remove this listener too
        socket.off("joinedRoom");
        socket.off("cellSelected");
      };
    }
  }, [socket, toaster, receivedInvite, invitationSent, onlineUsers]);

  const handleInvite = (userToInvite: string) => {
    console.log("Inviting user:", userToInvite);
    if (socket && localStorage.getItem("username")) {
      socket.emit("sendInvite", { to: userToInvite }); // Correct event name
      console.log(`Sending invite to ${userToInvite}`);
      setInvitationSent(true);
    }
  };
  const handleAcceptInvite = () => {
    if (socket && receivedInvite) {
      console.log("Accepting invite from:", receivedInvite.from);
      socket.emit("acceptInvite", receivedInvite); // Emit acceptInvite with payload
      setInvitationSent(false);
    }
  };
  const handleJoinRoom = (roomId: string) => {
    if (socket) {
      console.log("Joining room", roomId);
      socket.emit("joinRoom", { roomId });
    }
  };

  const handleCellClick = (cell: string) => {
    if (socket && roomId) {
      socket.emit("selectCell", cell);
      console.log("Cell clicked:", cell);
    }
  };

  return (
    <SocketProvider>
      <Box>
        <Container maxW="container.xl" centerContent>
          <Toaster />
          <VStack rowGap={8} align="center">
            {/* Conditionally render sections based on game state */}
            {!roomId && ( // Show online users and invite controls if not in a room
              <>
                <OnlineUsersList
                  onlineUsers={onlineUsers}
                  handleInvite={handleInvite}
                />

                {/* Show accept invite button if an invite has been received */}

                {receivedInvite && (
                  <Button
                    onClick={handleAcceptInvite}
                    disabled={!receivedInvite}
                  >
                    Accept Invite from {receivedInvite?.from}
                  </Button>
                )}
              </>
            )}

            {roomId && opponentUsername ? ( // Render game if in a room
              <>
                <Heading size="md">
                  Playing with: {opponentUsername} (Room: {roomId})
                </Heading>

                <GameGrid
                  handleCellClick={handleCellClick}
                  selectedCells={selectedCells}
                />
              </>
            ) : (
              <Text>Waiting to Create or Join a room...</Text>
            )}
          </VStack>
        </Container>
      </Box>{" "}
    </SocketProvider>
  );
}



// File: \Wisflux\Internship Assignments\UGIG self draft\ugig-01\src\app\tsparticles\page.tsx
"use client";

import { useEffect, useState, useMemo } from "react";
import Particles, { initParticlesEngine } from "@tsparticles/react";
import { loadSlim } from "@tsparticles/slim";

const TestParticles = () => {
  const [init, setInit] = useState(false);

  useEffect(() => {
    initParticlesEngine(async (engine) => {
      await loadSlim(engine);
    }).then(() => {
      setInit(true);
    });
  }, []);

  const particlesLoaded = (container) => {
    console.log(container);
  };

  const particlesOptions = useMemo(
    () => ({
      background: {
        color: {
          value: "#000000",
        },
      },
      fpsLimit: 60,
      interactivity: {
        events: {
          onClick: {
            enable: true,
            mode: "push",
          },
          onHover: {
            enable: true,
            mode: "repulse",
          },
          resize: true,
        },
        modes: {
          push: {
            quantity: 4,
          },
          repulse: {
            distance: 200,
            duration: 0.4,
          },
        },
      },
      particles: {
        color: {
          value: "#ffffff",
        },
        links: {
          color: "#ffffff",
          distance: 150,
          enable: true,
          opacity: 0.5,
          width: 1,
        },
        collisions: {
          enable: true,
        },
        move: {
          direction: "none",
          enable: true,
          outModes: {
            default: "bounce",
          },
          random: false,
          speed: 2,
          straight: false,
        },
        number: {
          density: {
            enable: true,
            area: 800,
          },
          value: 80,
        },
        opacity: {
          value: 0.5,
        },
        shape: {
          type: "circle",
        },
        size: {
          value: { min: 1, max: 5 },
        },
      },
      detectRetina: true,
    }),
    []
  );

  return (
    <div style={{ height: "100vh", backgroundColor: "#000000" }}>
      {init && (
        <Particles
          id="tsparticles"
          particlesLoaded={particlesLoaded}
          options={particlesOptions}
        />
      )}
    </div>
  );
};

export default TestParticles;



// File: \Wisflux\Internship Assignments\UGIG self draft\ugig-01\src\app\globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* :root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
} */



// File: \Wisflux\Internship Assignments\UGIG self draft\ugig-01\src\app\layout.tsx
import type { Metadata } from "next";
import { Inter, Pixelify_Sans } from "next/font/google";
import "./globals.css";
import { Provider } from "../components/chakra/provider";
import { SocketProvider } from "@/components/ui/SocketProvider";

const inter = Inter({ subsets: ["latin"] });
const pixelify = Pixelify_Sans({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={`${inter.className} `}>
        {" "}
        <Provider>{children}</Provider>
      </body>
    </html>
  );
}



// File: \Wisflux\Internship Assignments\UGIG self draft\ugig-01\src\app\page.tsx
"use client";

import {
  Box,
  Container,
  Heading,
  HStack,
  Button,
  VStack,
  Flex,
} from "@chakra-ui/react";
import { useEffect, useState, useMemo } from "react";
import Link from "next/link";
import Image from "next/image";
import OnlineUsers from "../components/ui/OnlineUsers";
import {
  DrawerActionTrigger,
  DrawerBackdrop,
  DrawerBody,
  DrawerCloseTrigger,
  DrawerContent,
  DrawerFooter,
  DrawerHeader,
  DrawerRoot,
  DrawerTitle,
  DrawerTrigger,
} from "@/components/chakra/drawer";
import { useRouter } from "next/navigation";
import Particles, { initParticlesEngine } from "@tsparticles/react";
import { loadSlim } from "@tsparticles/slim";
import { FaBars } from "react-icons/fa";
import { Pixelify_Sans } from "next/font/google";

const pixelify = Pixelify_Sans({ subsets: ["latin"] });
export default function Home() {
  const [open, setOpen] = useState(false);
  const [init, setInit] = useState(false);
  const router = useRouter();

  useEffect(() => {
    initParticlesEngine(async (engine) => {
      await loadSlim(engine);
    }).then(() => {
      setInit(true);
    });
  }, []);

  const particlesLoaded = (container) => {
    console.log(container);
  };

  const particlesOptions = useMemo(
    () => ({
      background: {
        color: {
          value: "#000000",
        },
      },
      fpsLimit: 60,
      interactivity: {
        events: {
          onClick: {
            enable: true,
            mode: "push",
          },
          onHover: {
            enable: true,
            mode: "repulse",
          },
          resize: true,
        },
        modes: {
          push: {
            quantity: 2,
          },
          repulse: {
            distance: 100,
            duration: 0.2,
          },
        },
      },
      particles: {
        color: {
          value: "#ffffff",
        },
        links: {
          color: "#ffffff",
          distance: 100,
          enable: true,
          opacity: 0.6,
          width: 0.5,
        },
        collisions: {
          enable: true,
        },
        move: {
          direction: "none",
          enable: true,
          outModes: {
            default: "bounce",
          },
          random: false,
          speed: 1,
          straight: false,
        },
        number: {
          density: {
            enable: true,
            area: 800,
          },
          value: 40,
        },
        opacity: {
          value: 0.3,
        },
        shape: {
          type: "circle",
        },
        size: {
          value: { min: 1, max: 3 },
        },
      },
      detectRetina: true,
    }),
    []
  );

  const handleLaunchGame = () => {
    router.push("/play");
    console.log("Launching game...");
  };

  return (
    <Box minH="100vh" position="relative" overflow="hidden">
      <Container maxW="90%" p={4} position="relative" zIndex={1}>
        {init && (
          <Particles
            id="tsparticles"
            particlesLoaded={particlesLoaded}
            options={particlesOptions}
          />
        )}
        <Flex justifyContent="space-between" alignItems="center">
          <DrawerRoot
            open={open}
            onOpenChange={(e) => setOpen(e.open)}
            placement={"start"}
          >
            <DrawerBackdrop />
            <DrawerTrigger asChild>
              <Button variant="outline" size="sm" colorScheme="gray">
                <FaBars />
              </Button>
            </DrawerTrigger>
            <DrawerContent>
              <DrawerHeader>
                <DrawerTitle>Menu</DrawerTitle>
              </DrawerHeader>
              <DrawerBody>
                <VStack rowGap={4} align="start">
                  <Link href="/auth/login">
                    <Button
                      variant="ghost"
                      colorScheme="gray"
                      onClick={() => setOpen(false)}
                    >
                      Login
                    </Button>
                  </Link>
                  <Link href="/auth/signup">
                    <Button colorScheme="gray" onClick={() => setOpen(false)}>
                      Sign Up
                    </Button>
                  </Link>
                </VStack>
              </DrawerBody>
              <DrawerFooter>
                <DrawerActionTrigger asChild>
                  <Button
                    variant="outline"
                    colorScheme="gray"
                    onClick={() => setOpen(false)}
                  >
                    Close
                  </Button>
                </DrawerActionTrigger>
              </DrawerFooter>
              <DrawerCloseTrigger />
            </DrawerContent>
          </DrawerRoot>

          <Heading
            as="h1"
            size="xl"
            textAlign="center"
            flexGrow={1}
            fontFamily={"Roboto"}
            fontSize={{ base: "2xl", md: "3xl" }}
            color="white"
          >
            UGIG
          </Heading>

          <HStack columnGap={4} display={{ base: "none", md: "flex" }}>
            <Link href="/auth/login">
              <Button variant="ghost" colorScheme="gray">
                Login
              </Button>
            </Link>
            <Link href="/auth/signup">
              <Button colorScheme="gray">Sign Up</Button>
            </Link>
          </HStack>
        </Flex>

        <Flex
          direction="column"
          align="center"
          justify="center"
          minH="80vh"
          mt={12}
        >
          <VStack
            rowGap={20}
            align="center"
            css={{
              zIndex: 1000,
            }}
          >
            <div style={{ right: "50px" }}>
              <Image
                src={"/gamelogo.gif"}
                style={{ right: "50px" }}
                alt="Game Logo"
                width={200}
                height={300}
              />
            </div>
            <Box
              as={Button}
              className={` bg-gradient-to-r from-gray-700 to-gray-900 px-4 `}
              // size="lg"
              onClick={handleLaunchGame}
              animation="glow 1.5s infinite"
              _hover={{
                animation: "none",
              }}
              color="WHITE"
              px={10}
              py={5}
            >
              LAUNCH GAME
            </Box>
            {/* <OnlineUsers /> */}
          </VStack>
        </Flex>
      </Container>
    </Box>
  );
}

